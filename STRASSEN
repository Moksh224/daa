#include <iostream>
#include <vector>

using namespace std;

typedef vector<vector<int>> Matrix;

// Function to add two matrices
Matrix add_matrix(const Matrix &A, const Matrix &B) {
    int n = A.size();
    Matrix result(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            result[i][j] = A[i][j] + B[i][j];
    return result;
}

// Function to subtract two matrices
Matrix subtract_matrix(const Matrix &A, const Matrix &B) {
    int n = A.size();
    Matrix result(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            result[i][j] = A[i][j] - B[i][j];
    return result;
}

// Strassen's algorithm
Matrix strassen(const Matrix &A, const Matrix &B) {
    int n = A.size();

    // Base case when matrix size is 1x1
    if (n == 1) {
        return {{A[0][0] * B[0][0]}};
    }

    // Divide matrices into submatrices
    int mid = n / 2;
    Matrix A11(mid, vector<int>(mid)), A12(mid, vector<int>(mid)),
           A21(mid, vector<int>(mid)), A22(mid, vector<int>(mid)),
           B11(mid, vector<int>(mid)), B12(mid, vector<int>(mid)),
           B21(mid, vector<int>(mid)), B22(mid, vector<int>(mid));

    for (int i = 0; i < mid; ++i)
        for (int j = 0; j < mid; ++j) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + mid];
            A21[i][j] = A[i + mid][j];
            A22[i][j] = A[i + mid][j + mid];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + mid];
            B21[i][j] = B[i + mid][j];
            B22[i][j] = B[i + mid][j + mid];
        }

    // Compute the 7 Strassen's matrix products
    Matrix M1 = strassen(add_matrix(A11, A22), add_matrix(B11, B22));
    Matrix M2 = strassen(add_matrix(A21, A22), B11);
    Matrix M3 = strassen(A11, subtract_matrix(B12, B22));
    Matrix M4 = strassen(A22, subtract_matrix(B21, B11));
    Matrix M5 = strassen(add_matrix(A11, A12), B22);
    Matrix M6 = strassen(subtract_matrix(A21, A11), add_matrix(B11, B12));
    Matrix M7 = strassen(subtract_matrix(A12, A22), add_matrix(B21, B22));

    // Combine the results into the final matrix
    Matrix C(n, vector<int>(n));
    for (int i = 0; i < mid; ++i)
        for (int j = 0; j < mid; ++j) {
            C[i][j] = M1[i][j] + M4[i][j] - M5[i][j] + M7[i][j];
            C[i][j + mid] = M3[i][j] + M5[i][j];
            C[i + mid][j] = M2[i][j] + M4[i][j];
            C[i + mid][j + mid] = M1[i][j] - M2[i][j] + M3[i][j] + M6[i][j];
        }
    return C;
}

// Function to print a matrix
void print_matrix(const Matrix &M) {
    for (const auto &row : M) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }
}

int main() {
    int n = 4;  // Matrix size, must be a power of 2 for simplicity

    // Example matrices
    Matrix A = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {13, 14, 15, 16}
    };
    Matrix B = {
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 0, 0, 1}
    };

    // Perform Strassen's multiplication
    Matrix result = strassen(A, B);

    // Print the result
    cout << "Result of Strassen's Matrix Multiplication:" << endl;
    print_matrix(result);

    return 0;
}
